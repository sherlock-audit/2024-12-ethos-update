
# Reference: https://trust-ethos.atlassian.net/wiki/spaces/ethoscore/pages/39321696/Frontend+code+convention
Prefer function syntax over arrow function syntax.
BAD: `const someFunction = () => {...}`
GOOD: `function someFunction () {...}`

In order to keep the code clean & readable, do not use random or shortened names for functions, variables, components and basically everything.
Examples:
BAD: `const valToBodyFN = () => {...}`
GOOD: `const formatFormValuesToRequestBody = () => {...}`


Try to write code that is easily understandable by others, but if the code still comes out looking complex and hard to understand, leave a comment explaining what different parts of the code do. You do not have to break it down like for a 2 year old, just tell us what is happening and where. JSDoc-style comment above the function or a variable can also help as it would be shown while hovering over it in IDE.
GOOD example:
```
/**
 * This function performs complex data formatting for ...
 */
function someComplexFunction (usersData: Type) {
  // format users data into the format we need
  const formattedUsersData = userData.reduce<Type2>(formattedData, user => {
    // check if user is admin because we need to use different format for admin users
    if (user.type === 'admin') {
      // perform some stuff...
    },
    []
  }
  // some other stuff...
}
```

Break down code into smaller pieces :
* If there is a logic inside a component that can be exported into helper/util/hook
* If there is a part of the component that can be exported into separate smaller components
* If there are types/constants/mocks, they can and should be moved to separate files outside of the component


use memoization techniques where appropriate:
Example 1:
BAD:
```
.....
const someFunction = () => {
  //heavyCalculation
}
......
```

GOOD:
```
.....
const someFunction = useCallback(() => {
  //heavyCalculation
}, [dependency])
......
```

Example 2:
BAD:
```
.....
const selectOptions = users.map(user => ({user.address}))
......
```

GOOD:
```
.....
const selectOptions = useMemo(
  () => users.map(user => ({user.address})),
  [users]
)
......

And use them instead of adding extra state where it is possible
BAD:
```
const [selectOptions, setSelectOptions] = useState([])

useEffect(() => {
  setSelectOptions(users.map(user => ({user.address})))
}, [users])
```

GOOD:
```
const selectOptions = useMemo(
  () => users.map(user => ({user.address})),
  [users]
)
```
