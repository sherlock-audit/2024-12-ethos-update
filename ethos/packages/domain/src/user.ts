import { isValidAddress } from '@ethos/helpers';
import { getAddress, type Address } from 'viem';

export type EthosUserTarget =
  | { address: Address }
  | { service: string; account: string }
  | { profileId: number };

/**
 * An extended version of EthosUserTarget that allows the "username" field on
 * service targets.
 */
export type EthosUserTargetWithTwitterUsername =
  | EthosUserTarget
  | {
      service: string;
      username: string;
    };

// key separator
const sep = ':';

/**
 * Converts an EthosUserTarget object to a string key for caching purposes.
 *
 * @param targetUser - The EthosUserTarget object to convert.
 * @returns A string key representing the user target.
 * @throws Error if the EthosUserTarget object is invalid.
 *
 * @example
 * // Returns "address:0x1234..."
 * toUserKey({ address: "0x1234..." })
 *
 * @example
 * // Returns "service:x.com:123456789"
 * toUserKey({ service: "x.com", account: "123456789" })
 *
 * @example
 * // Returns "service:x.com:johndoe"
 * toUserKey({ service: "x.com", username: "johndoe" })
 *
 * @example
 * // Returns "profileId:123"
 * toUserKey({ profileId: 123 })
 */
export function toUserKey(
  targetUser: EthosUserTargetWithTwitterUsername,
  lowercaseAddress?: boolean,
): string {
  if ('address' in targetUser) {
    return [
      'address',
      lowercaseAddress ? targetUser.address.toLowerCase() : targetUser.address,
    ].join(sep);
  }

  if ('service' in targetUser && 'account' in targetUser) {
    return ['service', targetUser.service, targetUser.account].join(sep);
  }

  if ('service' in targetUser && 'username' in targetUser) {
    return ['service', targetUser.service, 'username', targetUser.username].join(sep);
  }

  if ('profileId' in targetUser) {
    return ['profileId', String(targetUser.profileId)].join(sep);
  }

  throw new Error('Invalid EthosUserTarget');
}

/**
 * Converts a string key back to an EthosUserTarget object.
 *
 * This function is the inverse of `toUserKey`. It takes a string key
 * generated by `toUserKey` and converts it back to an EthosUserTarget object.
 *
 * @param key - The string key to convert.
 * @returns An EthosUserTarget object.
 * @throws Error if the key format is invalid.
 *
 * @example
 * // Returns { address: "0x1234..." }
 * fromUserKey("address:0x1234...")
 *
 * @example
 * // Returns { service: "x.com", account: "123456789" }
 * fromUserKey("service:x.com:123456789")
 *
 * @example
 * // Returns { service: "x.com", username: "johndoe" }
 * fromUserKey("service:x.com:username:johndoe")
 *
 * @example
 * // Returns { profileId: 123 }
 * fromUserKey("profileId:123")
 */
export function fromUserKey(
  key: string,
  allowTwitterUsername: true,
): EthosUserTargetWithTwitterUsername;
export function fromUserKey(key: string, allowTwitterUsername?: false): EthosUserTarget;
export function fromUserKey(
  key: string,
  allowTwitterUsername = false,
): EthosUserTarget | EthosUserTargetWithTwitterUsername {
  const [type, ...rest] = key.split(sep);

  switch (type) {
    case 'address':
      return { address: getAddress(rest.join(sep)) };
    case 'service': {
      const [service, account, username] = rest;

      if (account === 'username') {
        if (!allowTwitterUsername) {
          throw new Error('"username" is not allowed');
        }

        return { service, username };
      }

      return { service, account };
    }
    case 'profileId':
      return { profileId: Number(rest.join(sep)) };
    default:
      throw new Error('Invalid user key format');
  }
}

/**
 * Checks whether an EthosTarget is valid or not
 *
 * @param targetUser - The EthosUserTarget object to convert.
 * @returns A boolean representing validity
 * @throws Error if the EthosUserTarget object is invalid.
 *
 * @example
 * // Returns true
 * isTargetValid({ address: "0x1234..." })
 *
 * @example
 * // Returns true
 * isTargetValid({ service: "x.com", account: "123456789" })
 *
 * @example
 * // Returns true
 * isTargetValid({ service: "x.com", username: "johndoe" })
 *
 * @example
 * // Returns true
 * isTargetValid({ profileId: 1 })
 */
export function isTargetValid(targetUser: EthosUserTargetWithTwitterUsername): boolean {
  const keysLength = Object.keys(targetUser).length;

  if ('address' in targetUser && keysLength === 1) {
    return isValidAddress(targetUser.address);
  }

  if ('service' in targetUser && 'account' in targetUser && keysLength === 2) {
    return Boolean(targetUser.service) && Boolean(targetUser.account);
  }

  if ('service' in targetUser && 'username' in targetUser && keysLength === 2) {
    return Boolean(targetUser.service) && Boolean(targetUser.username);
  }

  if ('profileId' in targetUser && keysLength === 1) {
    return targetUser.profileId > 0;
  }

  throw new Error('Invalid EthosUserTarget');
}

export function deduplicateTargets(targets: EthosUserTarget[]): {
  userkeys: string[];
  targets: EthosUserTarget[];
} {
  const userkeys = new Set<string>();

  for (const target of targets) {
    userkeys.add(toUserKey(target));
  }

  const distinctUserkeys = Array.from(userkeys);

  return {
    userkeys: distinctUserkeys,
    targets: distinctUserkeys.map((key) => fromUserKey(key)),
  };
}
